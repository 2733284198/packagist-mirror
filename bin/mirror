#!/usr/bin/env php
<?php

declare(strict_types=1);

/*
 * This file is part of the Packagist Mirror.
 *
 * For the full license information, please view the LICENSE.md
 * file that was distributed with this source code.
 */

$autoload = __DIR__ . '/../vendor/autoload.php';
if (!file_exists($autoload)) {
    die(
        'You need to set up the project dependencies '.
        'using the following commands:' . PHP_EOL .
        'wget http://getcomposer.org/composer.phar' . PHP_EOL .
        'php composer.phar install' . PHP_EOL
    );
}

require $autoload;

ini_set('memory_limit', '-1');
chdir(__DIR__.'/..');

// Prepare using default .env
if (!file_exists('.env')) {
    copy('.env.example', '.env');
}

// Load env
$dotenv = new Dotenv\Dotenv(getcwd());
$dotenv->load();

// Using Sebastian version formatter
$version = new SebastianBergmann\Version(
    getenv('APP_VERSION'), getcwd()
);

$cli = new Symfony\Component\Console\Application(
    getenv('APP_NAME'),
    $version->getVersion()
);

$provider = new Webs\Mirror\Provider;
$package = new Webs\Mirror\Package;
$progressBar = new Webs\Mirror\ProgressBar;
$filesystem = new Webs\Mirror\Filesystem(getenv('PUBLIC_DIR'));

$clean = new Webs\Mirror\Command\Clean();
$clean->setProgressBar($progressBar);
$clean->setProvider($provider);
$clean->setPackage($package);
$clean->setFilesystem($filesystem);

$create = new Webs\Mirror\Command\Create();
$create->setProgressBar($progressBar);
$create->setProvider($provider);
$create->setPackage($package);
$create->setFilesystem($filesystem);
$create->setClean($clean);
$create->setHttp(new Webs\Mirror\Http(
    new new Webs\Mirror\Mirror(getenv('MAIN_MIRROR'), explode(',', getenv('DATA_MIRROR'))),
    getenv('MAX_CONNECTIONS')
));

$cli->add($create);
$cli->add($clean);
$cli->run();
